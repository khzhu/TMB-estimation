process {
    withName: SEQKIT_SPLIT2 {
        container = "${params.container_dir}/seqkit-v2.8.1.simg"
        ext.args = '--by-part 2'
        publishDir = [
                path: { "${params.output_dir}/preprocessing/fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,yml}",
                saveAs: { "seqkit/${meta.id}/${it}" }
        ]
    }
    withName: BWA_MEM1 {
        container = "${params.container_dir}/bwa-samtools-v0.7.17.simg"
        cpus = 16
        memory = 64.GB
        ext.args = '-M -v 1 -K 100000000'
        ext.args2 = '-Sb -q 10'
        ext.prefix = "part1"
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,yml}",
                saveAs: { "bwa/${meta.id}/${it}" }
        ]
    }
    withName: BWA_MEM2 {
        container = "${params.container_dir}/bwa-samtools-v0.7.17.simg"
        cpus = 16
        memory = 64.GB
        ext.args = '-M -v 1 -K 100000000'
        ext.args2 = '-Sb -q 10'
        ext.prefix = "part2"
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,yml}",
                saveAs: { "bwa/${meta.id}/${it}" }
        ]
    }
    withName: SAMBAMBA_MERGE {
        container = "${params.container_dir}/sambamba-1.0.1.simg"
        cpus = 16
        memory = 64.GB
        ext.prefix = { "${meta.id}.merged" }
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai,yml}",
                saveAs: { "sambamba/${meta.id}/${it}" }
        ]
    }

    withName: SAMBAMBA_MARKDUP {
        container = "${params.container_dir}/sambamba-1.0.1.simg"
        cpus = 16
        memory = 64.GB
        ext.args = ' --remove-duplicates --hash-table-size 525000 --overflow-list-size 525000 '
        ext.prefix = { "${meta.id}.sort.dedup" }
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai,yml}",
                saveAs: { "sambamba/${meta.id}/${it}" }
        ]
    }
    withName: SAMBAMBA_FLAGSTAT {
        container = "${params.container_dir}/sambamba-1.0.1.simg"
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,yml}",
                saveAs: { "sambamba/flagstat/${meta.id}/${it}" }
        ]
    }
    withName: SAMTOOLS_SORT {
        container = "${params.container_dir}/samtools-v1.20.simg"
        ext.prefix = { "${meta.id}.sort" }
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai,yml}",
                saveAs: { "samtools/${meta.id}/${it}" }
        ]
    }
    withName: GATK4_BASERECALIBRATOR {
        cpus = 16
        memory = 64.GB
        container = "${params.container_dir}/gatk4.3.simg"
        ext.args = '--use-original-qualities'
        publishDir = [
            path: { "${params.output_dir}/alignments/" },
            mode: params.publish_dir_mode,
            pattern: "*.{table,yml}",
            saveAs: { "gatk4/${meta.id}/${it}" }
        ]
    }
    withName: GATK4_APPLYBQSR {
        cpus = 16
        memory = 64.GB
        container = "${params.container_dir}/gatk4.3.simg"
        ext.args = '--static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30'
        publishDir = [
            path: { "${params.output_dir}/alignments/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai,yml}",
            saveAs: { "gatk4/${meta.id}/${it}" }
        ]
    }
    withName: SAMTOOLS_STATS {
        container = "${params.container_dir}/samtools-v1.20.simg"
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.stats",
                saveAs: { "samtools/${meta.id}/${it}" }
        ]
    }
    withName: SAMTOOLS_CONVERT {
        container = "${params.container_dir}/samtools-v1.20.simg"
        publishDir = [
                path: { "${params.output_dir}/alignments/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai,cram,crai,yml}",
                saveAs: { "samtools/${meta.id}/${it}" }
        ]
    }
}